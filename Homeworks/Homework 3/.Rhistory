# Chunk 17
set.seed(1)
# fit ridge regression model on training data, using the lambda grid from the previously fitted model
cv.out <- cv.glmnet(x_train, y_train, alpha=0, lambda=ridge_mod$lambda)
# select lambda that minimizes training MSE
bestlam <- cv.out$lambda.min
bestlam
# Chunk 18
# draw plot of training MSE as a function of lambda
plot(cv.out)
# Chunk 19
#| live: true
ridge_pred <- predict(ridge_mod, s=bestlam, newx=x_test) # use best lambda to predict on test data
compute_mse(ridge_pred, y_test) # calculate test MSE
# Chunk 20
#| live: true
out <- glmnet(x, y, alpha=0) # fit ridge regression model on full dataset
predict(out, type="coefficients", s=bestlam)[1:20, ] # display coefficients using lambda chosen by CV
# Chunk 21
# fit lasso model on training data - again we let the function compute the lambda grid
lasso_mod <- glmnet(x_train, y_train, alpha=1)
plot(lasso_mod) # Draw plot of coefficients
plot(lasso_mod, xvar="lambda")
# Chunk 22
#| live: true
set.seed(1)
cv.out <- cv.glmnet(x_train, y_train, alpha=1, lambda=lasso_mod$lambda) # fit lasso model on training data
plot(cv.out) # draw plot of training MSE as a function of lambda
bestlam <- cv.out$lambda.min # select lambda that minimizes training MSE
lasso_pred <- predict(lasso_mod, s=bestlam, newx=x_test) # use best lambda to predict test data
compute_mse(lasso_pred, y_test) # calculate test MSE
# Chunk 23
# fit lasso model on full dataset
out <- glmnet(x, y, alpha=1)
# display coefficients using lambda chosen by CV
lasso_coef <- predict(out, type="coefficients", s=bestlam)[1:20, ]
lasso_coef
# Chunk 24
# display only non-zero coefficients
lasso_coef[lasso_coef != 0]
# Chunk 25
library(tree) # install.packages("tree")
# Chunk 26
data(Carseats)
head(Carseats)
# Chunk 27
x <- as_tibble(Carseats) %>%
mutate(High = cut(Sales, c(-Inf, 8, Inf), c("No", "Yes"))) %>%
select(-Sales)
# c(-Inf, 8, Inf) is a vector of cut points (length: L);
# c("No", "Yes") is a vector of category labels (length: L-1)
# Chunk 28
#| live: true
tree.carseats <- tree(High ~ ., data=x)
summary(tree.carseats)
# Chunk 29
plot(tree.carseats)
text(tree.carseats, pretty=0) # add node labels
title(main="Carseats: Unpruned classification tree")
# Chunk 30
#| output.lines: 10
tree.carseats
# Chunk 31
set.seed(2)
train <- sample(1:nrow(x), 200)
x.test <- x[-train, ]
High.test <- x.test$High
tree.carseats <- tree(High ~ ., x, subset=train)
tree.pred <- predict(tree.carseats, x.test, type="class")
table(tree.pred, High.test) # confusion matrix
mean(tree.pred == High.test) # accuracy on test
mean(tree.pred != High.test) # prediction error on test
# Chunk 32
set.seed(1)
cv.carseats <- cv.tree(object=tree.carseats, FUN=prune.misclass)
names(cv.carseats)
cv.carseats
# Chunk 33
op <- par(mfrow=c(1, 2))
plot(cv.carseats$size, cv.carseats$dev, type="b")
plot(cv.carseats$k, cv.carseats$dev, type="b")
par(op)
# Chunk 34
#| live: true
opt.size <- cv.carseats$size[which.min(cv.carseats$dev)] # get the optimal size
prune.carseats <- prune.misclass(tree.carseats, best=opt.size)
# Chunk 35
plot(prune.carseats)
text(prune.carseats, pretty=0)
title(main="Carseats: Pruned classification tree")
# Chunk 36
tree.pred <- predict(prune.carseats, x.test, type="class")
table(tree.pred, High.test)
mean(tree.pred==High.test) # accuracy
# Chunk 37
prune.carseats <- prune.misclass(tree.carseats, best=14)
plot(prune.carseats)
text(prune.carseats, pretty=0)
tree.pred <- predict(prune.carseats, x.test, type="class")
table(tree.pred, High.test)
mean(tree.pred==High.test) # accuracy
# Chunk 38
library(MASS)
data("Boston", package="ISLR2") # we specify the package source to avoid conflicts
head(Boston)
# Chunk 39
library(rsample)
set.seed(1)
boston_split <- initial_split(Boston, prop=0.5)
x_train <- training(boston_split)
x_test <- testing(boston_split)
y_test <- x_test$medv
# fit a regression tree
tree_boston <- tree(medv ~ ., x_train)
summary(tree_boston)
# Chunk 40
plot(tree_boston)
text(tree_boston, pretty=0)
title(main="Boston: Unpruned regression tree")
# Chunk 41
cv.boston <- cv.tree(tree_boston)
plot(cv.boston$size, cv.boston$dev, type="b")
# Chunk 42
prune_boston <- prune.tree(tree_boston, best=5)
plot(prune_boston)
text(prune_boston, pretty=0)
title(main="Boston: Pruned regression tree")
# Chunk 43
yhat <- predict(tree_boston, newdata=x_test)
plot(yhat, y_test)
abline(0, 1)
# Chunk 44
compute_mse(yhat, y_test) # test set MSE
sqrt(compute_mse(yhat, y_test)) # root of MSE (i.e., the standard deviation)
# Chunk 45
#| live: true
library(randomForest)
set.seed(1)
n_pred <- ncol(Boston) - 1
# bagging on the training portion of Boston:
# note the mtry=n_pred argument
bag.boston <- randomForest(medv ~ ., data=x_train, mtry=n_pred, importance=TRUE)
bag.boston
# Chunk 46
yhat.bag <- predict(bag.boston, newdata=x_test)
plot(yhat.bag, y_test)
abline(0, 1)
compute_mse(yhat.bag, y_test)
# Chunk 47
bag.boston <- randomForest(medv ~ ., data=x_train, mtry=n_pred, importance=TRUE, ntree=25)
yhat.bag <- predict(bag.boston, newdata=x_test)
plot(yhat.bag, y_test)
abline(0, 1)
compute_mse(yhat.bag, y_test)
# Chunk 48
set.seed(1)
rf.boston <- randomForest(medv ~ ., data=x_train, mtry=6, importance=TRUE)
yhat.rf <- predict(rf.boston, newdata=x_test)
compute_mse(yhat.rf, y_test)
# Chunk 49
knitr::kable(importance(rf.boston))
# use knitr::kable() in Quarto or Rmd to output pretty tables
# Chunk 50
varImpPlot(rf.boston)
# Chunk 51
#| live: true
library(gbm)
set.seed(1)
boosted <- gbm(medv ~ ., data=x_train, distribution="gaussian",
n.trees=5000, interaction.depth=4)
knitr::kable(summary(boosted))
# Chunk 52
plot(boosted, i="rm")
plot(boosted, i="lstat")
# Chunk 53
yhat.boost <- predict(boosted, newdata=x_test, n.trees=5000)
compute_mse(yhat.boost, y_test)
# Chunk 54
boosted <- gbm(medv ~ ., data=x_train, distribution="gaussian",
n.trees=5000, interaction.depth=4,
shrinkage=0.2, verbose=F)
yhat.boost2 <- predict(boosted, newdata=x_test, n.trees=5000)
compute_mse(yhat.boost2, y_test)
bag.boston <- randomForest(medv ~ ., data=x_train, mtry=n_pred, importance=TRUE, ntree=25)
yhat.bag <- predict(bag.boston, newdata=x_test)
plot(yhat.bag, y_test)
abline(0, 1)
compute_mse(yhat.bag, y_test)
yhat.bag
# plot
plot(soft.pred, leukemia_tst$y)
# conf, matrix, accuracy, pred.error
conf_mtr <- table(leukemia_tst$y, soft.pred)
acc_ts <- mean(leukemia_tst$y== soft.pred)
err_ts <- mean(leukemia_tst$y != soft.pred)
conf_mtr
acc_ts
err_ts
# plot
kable(conf_mtr)
kable(acc_ts)
row.names(log_conf) <- c("pred 0","pred 1")
colnames(conf_mtr) <- c("true 0","true 1")
# plot
kable(conf_mtr)
row.names(log_conf) <- c("pred -1","pred 1")
colnames(conf_mtr) <- c("true -1","true 1")
row.names(conf_mtr) <- c("pred -1","pred 1")
colnames(conf_mtr) <- c("true -1","true 1")
# plot
kable(conf_mtr)
colnames(acc_ts) <- c("accuracy")
kable(acc_ts, col.names = "accuracy")
plot(svmfit, leukemia_trn)
conf_mtr[1]
conf_mtr[4]/
conf_mtr[4]
conf_mtr[2]
conf_mtr[3]
true_pos <- conf_mtr[4]/(conf_mtr[1]+conf_mtr[3] )
true_pos
conf_mtr[3]/
conf_mtr[3]
fpr <- conf_mtr[2]/(conf_mtr[4]+conf_mtr[2] )
fpr
# create a dataframe
df2<- rbind(acc_ts,tpr,fpr)
tpr <- conf_mtr[4]/(conf_mtr[4]+conf_mtr[3] )
# create a dataframe
df2<- rbind(acc_ts,tpr,fpr)
#rename columns
colnames(df2) <- c("k-nn","log.model")
df2
# convert to a table
summary_tbl <- as.table(df2)
summary_tbl
kable(summary_tbl, col.names = "soft svm")
# create a dataframe
df1<- rbind(opt_cost,opt_radial_cost,opt_gamma,opt_poly_cost,opt_degree)
#rename columns
colnames(df1) <- c("soft svm cost","radial cost", "radial gamma", "poly cost", "poly degree")
df1
# create a dataframe
df2<- rbind(acc_ts,tpr,fpr)
# convert to a table
summary_tbl <- as.table(df2)
row.names(conf_mtr) <- c("pred -1","pred 1")
colnames(conf_mtr) <- c("true -1","true 1")
# plot
kable(conf_mtr)
kable(summary_tbl, col.names = "soft svm")
# Assicurarsi che y sia numerico una volta per tutte
leukemia_sd_p <- leukemia_sd[,1:7]
# Selezionare le prime 5 colonne
for (i in 1:7) {
j = i +1
col1 <- names(leukemia_sd_p)[i]
col2 <- names(leukemia_sd_p)[j]
formula <- as.formula(paste(col1,"~", col2))
# Facciamo il plot utilizzando 'leukemia'
plot(soft.svm, leukemia_trn, formula)
}
# Assicurarsi che y sia numerico una volta per tutte
leukemia_sd_p <- leukemia_sd[,1:7]
# Selezionare le prime 5 colonne
op <- par(mfrow=c(2, 3))
for (i in 1:7) {
j = i +1
col1 <- names(leukemia_sd_p)[i]
col2 <- names(leukemia_sd_p)[j]
formula <- as.formula(paste(col1,"~", col2))
# Facciamo il plot utilizzando 'leukemia'
plot(soft.svm, leukemia_trn, formula)
}
# Assicurarsi che y sia numerico una volta per tutte
leukemia_sd_p <- leukemia_sd[,1:7]
# Selezionare le prime 5 colonne
op <- par(mfrow=c(2, 2))
for (i in 1:7) {
j = i +1
col1 <- names(leukemia_sd_p)[i]
col2 <- names(leukemia_sd_p)[j]
formula <- as.formula(paste(col1,"~", col2))
# Facciamo il plot utilizzando 'leukemia'
plot(soft.svm, leukemia_trn, formula)
}
# Assicurarsi che y sia numerico una volta per tutte
leukemia_sd_p <- leukemia_sd[,1:7]
# Selezionare le prime 5 colonne
op <- par(mfrow=c(2, 2))
for (i in 1:7) {
j = i +1
col1 <- names(leukemia_sd_p)[i]
col2 <- names(leukemia_sd_p)[j]
formula <- as.formula(paste(col1,"~", col2))
# Facciamo il plot utilizzando 'leukemia'
plot(soft.svm, leukemia_trn, formula)
}
# Assicurarsi che y sia numerico una volta per tutte
leukemia_sd_p <- leukemia_sd[,1:7]
# Selezionare le prime 5 colonne
op <- par(mfrow=c(1, 4))
for (i in 1:7) {
j = i +1
col1 <- names(leukemia_sd_p)[i]
col2 <- names(leukemia_sd_p)[j]
formula <- as.formula(paste(col1,"~", col2))
# Facciamo il plot utilizzando 'leukemia'
plot(soft.svm, leukemia_trn, formula)
}
# Assicurarsi che y sia numerico una volta per tutte
leukemia_sd_p <- leukemia_sd[,1:3]
# Selezionare le prime 5 colonne
op <- par(mfrow=c(1, 2))
for (i in 1:3) {
j = i +1
col1 <- names(leukemia_sd_p)[i]
col2 <- names(leukemia_sd_p)[j]
formula <- as.formula(paste(col1,"~", col2))
# Facciamo il plot utilizzando 'leukemia'
plot(soft.svm, leukemia_trn, formula)
}
# Assicurarsi che y sia numerico una volta per tutte
leukemia_sd_p <- leukemia_sd[,1:3]
# Selezionare le prime 5 colonne
op <- par(mfrow=c(2, 1))
for (i in 1:3) {
j = i +1
col1 <- names(leukemia_sd_p)[i]
col2 <- names(leukemia_sd_p)[j]
formula <- as.formula(paste(col1,"~", col2))
# Facciamo il plot utilizzando 'leukemia'
plot(soft.svm, leukemia_trn, formula)
}
op <- par(mfrow=c(2, 1))
for (i in 1:3) {
j = i +1
col1 <- names(leukemia_sd_p)[i]
col2 <- names(leukemia_sd_p)[j]
formula <- as.formula(paste(col1,"~", col2))
# Facciamo il plot utilizzando 'leukemia'
plot(soft.svm, leukemia_trn, formula)
}
par(op)
# Assicurarsi che y sia numerico una volta per tutte
leukemia_sd_p <- leukemia_sd[,1:7]
# Selezionare le prime 5 colonne
for (i in 1:7) {
j = i +1
col1 <- names(leukemia_sd_p)[i]
col2 <- names(leukemia_sd_p)[j]
formula <- as.formula(paste(col1,"~", col2))
# Facciamo il plot utilizzando 'leukemia'
plot(soft.svm, leukemia_trn, formula)
}
# Assicurarsi che y sia numerico una volta per tutte
leukemia_sd_p <- leukemia_sd[,1:7]
# Selezionare le prime 5 colonne
for (i in 1:7) {
j = i +1
col1 <- names(leukemia_sd_p)[i]
col2 <- names(leukemia_sd_p)[j]
formula <- as.formula(paste(col1,"~", col2))
# Facciamo il plot utilizzando 'leukemia'
plot(soft.svm, leukemia_trn, formula)
}
# Assicurarsi che y sia numerico una volta per tutte
leukemia_sd_p <- leukemia_sd[,1:7]
# Selezionare le prime 5 colonne
for (i in 1:7) {
j = i +1
col1 <- names(leukemia_sd_p)[i]
col2 <- names(leukemia_sd_p)[j]
formula <- as.formula(paste(col1,"~", col2))
# Facciamo il plot utilizzando 'leukemia'
plot(soft.svm, leukemia_trn, formula)
}
# Assicurarsi che y sia numerico una volta per tutte
leukemia_sd_p <- leukemia_sd[,1:7]
# Selezionare le prime 5 colonne
op <- par(mfrow=c(2, 2))
for (i in 1:7) {
j = i +1
col1 <- names(leukemia_sd_p)[i]
col2 <- names(leukemia_sd_p)[j]
formula <- as.formula(paste(col1,"~", col2))
# Facciamo il plot utilizzando 'leukemia'
plot(soft.svm, leukemia_trn, formula)
}
# Assicurarsi che y sia numerico una volta per tutte
leukemia_sd_p <- leukemia_sd[,1:7]
# Selezionare le prime 5 colonne
for (i in 1:7) {
op <- par(mfrow=c(2, 2))
j = i +1
col1 <- names(leukemia_sd_p)[i]
col2 <- names(leukemia_sd_p)[j]
formula <- as.formula(paste(col1,"~", col2))
# Facciamo il plot utilizzando 'leukemia'
plot(soft.svm, leukemia_trn, formula)
par(op)
}
op <- par(mfrow=c(2, 2))
for (i in 1:7) {
j = i +1
col1 <- names(leukemia_sd_p)[i]
col2 <- names(leukemia_sd_p)[j]
formula <- as.formula(paste(col1,"~", col2))
# Facciamo il plot utilizzando 'leukemia'
plot(soft.svm, leukemia_trn, formula)
}
# Assicurarsi che y sia numerico una volta per tutte
leukemia_sd_p <- leukemia_sd[,1:7]
# Selezionare le prime 5 colonne
op <- par(mfrow=c(2, 2))
for (i in 1:4) {
j = i +1
col1 <- names(leukemia_sd_p)[i]
col2 <- names(leukemia_sd_p)[j]
formula <- as.formula(paste(col1,"~", col2))
# Facciamo il plot utilizzando 'leukemia'
plot(soft.svm, leukemia_trn, formula)
}
par(op)
# Assicurarsi che y sia numerico una volta per tutte
leukemia_sd_p <- leukemia_sd[,1:7]
# Selezionare le prime 5 colonne
op <- par(mfrow=c(2, 2))
for (i in 1:4) {
j = i +1
col1 <- names(leukemia_sd_p)[i]
col2 <- names(leukemia_sd_p)[j]
formula <- as.formula(paste(col1,"~", col2))
# Facciamo il plot utilizzando 'leukemia'
plot(soft.svm, leukemia_trn, formula)
}
par(op)
# print dataset
head(leukemia, 4)
leukemia
# print dataset
print(head(leukemia, 4), width = Inf)
# print dataset
head(leukemia, 4)
#| layout-ncol=2
#| echo: FALSE
# Assicurarsi che y sia numerico una volta per tutte
leukemia_sd_p <- leukemia_sd[,10:17]
# Selezionare le prime 5 colonne
for (i in 1:4) {
j = i +1
col1 <- names(leukemia_sd_p)[i]
col2 <- names(leukemia_sd_p)[j]
formula <- as.formula(paste(col1,"~", col2))
# Facciamo il plot utilizzando 'leukemia'
plot(soft.svm, leukemia_trn, formula)
}
#| layout-ncol=2
#| echo: FALSE
# Assicurarsi che y sia numerico una volta per tutte
leukemia_sd_p <- leukemia_sd[,10:17]
# Selezionare le prime 5 colonne
for (i in 1:7) {
j = i +1
col1 <- names(leukemia_sd_p)[i]
col2 <- names(leukemia_sd_p)[j]
formula <- as.formula(paste(col1,"~", col2))
# Facciamo il plot utilizzando 'leukemia'
plot(soft.svm, leukemia_trn, formula)
}
#| layout-ncol=2
#| echo: FALSE
# Assicurarsi che y sia numerico una volta per tutte
leukemia_sd_p <- leukemia_sd[,20:27]
# Selezionare le prime 5 colonne
for (i in 1:7) {
j = i +1
col1 <- names(leukemia_sd_p)[i]
col2 <- names(leukemia_sd_p)[j]
formula <- as.formula(paste(col1,"~", col2))
# Facciamo il plot utilizzando 'leukemia'
plot(soft.svm, leukemia_trn, formula)
}
#| layout-ncol=2
#| echo: FALSE
# Assicurarsi che y sia numerico una volta per tutte
leukemia_sd_p <- leukemia_sd[,50:57]
# Selezionare le prime 5 colonne
for (i in 1:7) {
j = i +1
col1 <- names(leukemia_sd_p)[i]
col2 <- names(leukemia_sd_p)[j]
formula <- as.formula(paste(col1,"~", col2))
# Facciamo il plot utilizzando 'leukemia'
plot(soft.svm, leukemia_trn, formula)
}
leukemia_sd$y==-1
sum(leukemia_sd$y==-1)
sum(leukemia_sd$y==+1)
#| layout-ncol=2
#| echo: FALSE
# Assicurarsi che y sia numerico una volta per tutte
leukemia_sd_p <- leukemia_sd[,70:77]
# Selezionare le prime 5 colonne
for (i in 1:7) {
j = i +1
col1 <- names(leukemia_sd_p)[i]
col2 <- names(leukemia_sd_p)[j]
formula <- as.formula(paste(col1,"~", col2))
# Facciamo il plot utilizzando 'leukemia'
plot(soft.svm, leukemia_trn, formula)
}
